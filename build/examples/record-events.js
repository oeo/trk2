// Generated by CoffeeScript 2.7.0
(function() {
  // vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2
  var Metrics, Redis, _, creatives, data, domains, events, i, metrics, numEvents, offers, randomArr, randomIp, redis, ref, x;

  _ = require('lodash');

  Redis = require('ioredis');

  Metrics = require('./../module');

  redis = new Redis();

  metrics = new Metrics({
    redis: redis,
    key: 'examples',
    map: {
      bmp: ['ip'],
      add: ['event', 'event~offer', 'event~offer~creative', 'event~offer~channel', 'event~offer~s1', 'event~offer~s2', 'event~offer~s3', 'event~offer~creative~s1', 'event~offer~creative~s2', 'event~offer~creative~s3'],
      addv: [
        {
          key: 'offer~event',
          addKey: 'amount'
        }
      ],
      top: ['geo', 'offer', 'geo~offer', 'offer~creative', 'offer~host', 'offer~ref']
    }
  });

  // subfunctions to generate random event properties
  randomIp = function() {
    return [_.random(1, 128), _.random(0, 255), _.random(0, 255), _.random(0, 255)].join('.');
  };

  randomArr = function(a) {
    return _.sample(a);
  };

  events = ['offer_impression', 'offer_impression', 'offer_impression', 'offer_click', 'offer_conversion'];

  offers = ['526aa9fff3e8b600000000e5', '526aa9fff3e8b60000000002', '526aa9fff3e8b6000000000b', '526aa9fff3e8b6000000000b', '526aa9fff3e8b6000000000b'];

  creatives = ['c_0', 'c_1', 'c_2'];

  domains = ['aol.com', 'google.com', 'gmail.com', 'hotmail.com', 'example.com'];

  // store events in an array before recording
  data = [];

  numEvents = 100000;

  for (x = i = 1, ref = numEvents; (1 <= ref ? i <= ref : i >= ref); x = 1 <= ref ? ++i : --i) {
    data.push({
      ip: randomIp(),
      event: randomArr(events),
      geo: randomArr(['US', 'US', 'US', 'UK']),
      chan: randomArr(['any', 'text', 'text']),
      offer: randomArr(offers),
      creative: randomArr(creatives),
      ua: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36',
      host: randomArr(domains),
      ref_host: randomArr(domains),
      amount: _.random(1, 100)
    });
  }

  (async function() {
    var elapsed, eventObj, j, len, start;
    // "synchronous", record events one after the other
    start = new Date();
    for (j = 0, len = data.length; j < len; j++) {
      eventObj = data[j];
      await metrics.record(eventObj);
    }
    elapsed = new Date() - start;
    console.log(`Finished recording ${numEvents} events (series) in ${elapsed}ms`);
    console.log(`Series events digested/sec: ${numEvents / (elapsed / 1000)}`);
    // parallel, record X at a time
    start = new Date();
    await Promise.all(data.map(function(eventObj) {
      return metrics.record(eventObj);
    }));
    elapsed = new Date() - start;
    console.log(`Finished recording ${numEvents} events (parallel) in ${elapsed}ms`);
    console.log(`Parallel events digested/sec: ${numEvents / (elapsed / 1000)}`);
    return process.exit(0);
  })();

}).call(this);
