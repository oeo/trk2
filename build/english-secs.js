// Generated by CoffeeScript 2.7.0
(function() {
  // vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2
  var all, days, etime, hours, milliseconds, minutes, months, numbers, one, reAll, reOne, rewrite, seconds, singular, units, weeks, x, years;

  milliseconds = function(n) {
    return n;
  };

  x = function(fn, multiples) {
    return function(n) {
      return fn(n) * multiples;
    };
  };

  seconds = x(milliseconds, 1000);

  minutes = x(seconds, 60);

  hours = x(minutes, 60);

  days = x(hours, 24);

  weeks = x(days, 7);

  months = x(days, 31);

  years = x(months, 12);

  units = {
    ms: milliseconds,
    millisec: milliseconds,
    millisecs: milliseconds,
    millisecond: milliseconds,
    milliseconds: milliseconds,
    s: seconds,
    sec: seconds,
    secs: seconds,
    seconds: seconds,
    second: seconds,
    m: minutes,
    min: minutes,
    mins: minutes,
    minute: minutes,
    minutes: minutes,
    h: hours,
    hr: hours,
    hrs: hours,
    hour: hours,
    hours: hours,
    d: days,
    day: days,
    days: days,
    w: weeks,
    wk: weeks,
    wks: weeks,
    week: weeks,
    weeks: weeks,
    mo: months,
    mos: months,
    month: months,
    months: months,
    y: years,
    yr: years,
    yrs: years,
    year: years,
    years: years
  };

  // rewrite
  singular = ['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year'];

  numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve'];

  rewrite = function(input, customSingular, customNumbers) {
    var output, re;
    re = new RegExp(`((?:[a-z]\\s)|^)(${(customNumbers || numbers).join('|')})(?=\\s|$)`, 'g');
    output = input.replace(re, function(_, prefix, n) {
      var value;
      value = numbers.indexOf(n);
      return prefix + (value === -1 ? n : value);
    });
    re = new RegExp(`((?:[a-z]\\s)|^)(${(customSingular || singular).join('|')})(?=\\s|$)`, 'g');
    output = output.replace(re, function(_, prefix, unit) {
      return `${prefix}1 ${unit}`;
    });
    return output;
  };

  // parse
  reOne = /(\d+)\s?(\w+)/;

  reAll = /(\d+\s*\w+)/g;

  one = function(input, units) {
    var _, n, unit;
    [_, n, unit] = input.match(reOne);
    if (units[unit]) {
      return units[unit](parseInt(n));
    }
  };

  all = function(input, units) {
    var allMatches;
    input = input.toLowerCase();
    if (!(reAll.test(input) && /\d+[\w\s,]+/.test(input) && /\w$/.test(input))) {
      throw new Error(`Invalid time: \"${input}\"`);
    }
    allMatches = input.match(reAll);
    allMatches = allMatches.map(function(m) {
      return one(m, units);
    }).filter(function(el) {
      return el != null;
    });
    if (allMatches.length === 0) {
      return;
    }
    return allMatches.reduce(function(a, b) {
      return a + b;
    });
  };

  // primary export
  module.exports = etime = function(input, options = {}) {
    var result;
    if (typeof input === 'number') {
      return input;
    }
    result = all(rewrite(input, options.customSingularUnits), options.customUnits || units);
    if (options.milliseconds) {
      return result;
    } else {
      return Math.floor(result / 1000);
    }
  };

  module.exports.units = units;

  if (!module.parent) {
    console.log(etime('1 hr')); // Outputs seconds
    console.log(etime('1 mos')); // Outputs seconds
    console.log(etime('1 month')); // Outputs seconds
    console.log(etime('1 hr', {
      milliseconds: true // Outputs milliseconds
    }));
    console.log(etime('1 mos', {
      milliseconds: true // Outputs milliseconds
    }));
    console.log(etime('1 month', {
      milliseconds: true // Outputs milliseconds
    }));
    console.log(etime('1 month'));
  }

}).call(this);
